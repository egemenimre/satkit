# satkit: Satellite Mission Analysis and Design for Python
#
# Copyright (C) 2023 Egemen Imre
#
# Licensed under GNU GPL v3.0. See LICENSE.rst for more info.
"""
TLE helper functions and factory.
"""
import numpy as np
from org.orekit.frames import FramesFactory
from org.orekit.propagation.analytical.tle import TLE
from org.orekit.time import AbsoluteDate

from satkit import u


class TleFactory:
    """
    This class generates TLEs for common orbit types.

    A two-line element set (TLE) is a data format encoding a list of TEME
    (True Equator, Mean Equinox) mean orbital elements
    of an Earth-orbiting object for a given point in time, called the Epoch Time.

    These orbital elements are solely for use with the SGP4 propagator due to the
    analytical orbit theory used in its derivation.

    See the `TLE page in Wikipedia <https://en.wikipedia.org/wiki/Two-line_element_set>`_
    or `Space-Track definition <https://www.space-track.org/documentation#tle>`_
    for more information.

    The TLEs are usually generated by external sources and are used to propagate
    the orbits with the initial condition encapsulated by the TLE.
    """

    @staticmethod
    def init_geo(
        epoch: AbsoluteDate,
        longitude,
        launch_year=2000,
        launch_nr=1,
        launch_piece="A",
        sat_num=99999,
        classification="U",
        rev_nr=0,
        el_nr=1,
    ):
        """
        Initialises a geostationary satellite TLE.

        Due to the nature of the Earth's geopotential, the orbit may drift off
        by some degrees within weeks.

        Parameters
        ----------
        epoch : AbsoluteDate
            Epoch Time corresponding to the orbital elements (nominally very near
            the time of true ascending node passage)
        longitude : float or Quantity
            initial longitude of the satellite
        launch_year : int
            launch year (e.g., '2014')
        launch_nr : int
            launch number within the year (e.g., '17')
        launch_piece : str
            launch piece (3 chars max)
        sat_num : int
            satellite catalog number (e.g., '39552'; see TLE class documentation)
        classification : str
            Classification (`U` for Unclassified, `C` for Classified, `S` for Secret)
        rev_nr : int
            Revolution number of the object at Epoch Time (should be in range 0 <= `rev_nr` < 10000) [revolutions]
        el_nr : int
            Element set number (should be in range 0 <= `el_nr` < 10000). Incremented when a new TLE is generated for this object.

        Returns
        -------
        TLE
            `TLE` object initialised with the required GEO parameters.
        """
        # init GEO specific values - period is one sidereal day
        mean_motion = 2 * np.pi / (1.0 * u.sidereal_day).m_as("sec")

        # sidereal time hour angles in radians
        sidereal_time = (
            FramesFactory.getTOD(True)
            .getTransformTo(FramesFactory.getGTOD(True), epoch)
            .getRotation()
            .getAngle()
        )

        raan = longitude.m_as("rad") + sidereal_time

        bstar = 0.0  # no drag
        n_dot = 0.0  # mean motion assumed constant
        n_dotdot = 0.0  # mean motion assumed constant

        # init standard circular orbit (angles in rad)
        inclination = 0.0
        arg_perigee = 0.0
        mean_anomaly = 0.0
        eccentricity = 0.0

        eph_type = 0

        tle = TLE(
            sat_num,
            classification,
            launch_year,
            launch_nr,
            launch_piece,
            eph_type,
            el_nr,
            epoch,
            mean_motion,
            n_dot,
            n_dotdot,
            eccentricity,
            inclination,
            arg_perigee,
            raan,
            mean_anomaly,
            rev_nr,
            bstar,
        )

        return tle
